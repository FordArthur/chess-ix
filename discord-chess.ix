(function pawn-check piece target white? prom
  (var [dif-row dif-col] (map - piece target)
       final-row (if white? 0 7)
       starting-row (if white? 6 1)
       forwards (if white? 1 -1)
       enemy-pawn? @(= (white? "P" "p")))
  (unless (and (= (bool prom) (= (0 target) final-row)) (or (! prom) ((map (if white? lower-case val) ["R" "K" "B" "Q"]) prom))) (return false))
  (if (and (= forwards dif-row) (= (abs dif-col) 1) 
           (-> move-record -1 enemy-pawn?) 
           (-> ((fn [pc-x pc-y] [tg-x tg-y] (vec pc-x tg-y)) piece target) fetch-piece enemy-pawn?)) 
      (do (var !en-passant true) (return true)))
  (if (and (= 1 (abs dif-col)) (!= " " (fetch-piece target))) (return true))
  (if (!= dif-col 0) (return false))
  (if (or (= dif-row forwards) (and (= dif-row (* forwards 2)) (= starting-row (0 piece)))) (if prom (var !promotion true) true) false))
