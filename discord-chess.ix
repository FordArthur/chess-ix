(var out-of-board? #(or (< % 0) (> % 7)) to-num-col {:a 0, :b 1, :c 2, :d 3, :e 4, :f 5, :g 6, :h, 7} 
  help
  "-------------------------Chess-------------------------
  new                           start a new game
  move piece:target             moves 'piece' into 'target'     
  help topic                    display help about 'topic'
  
  Topics:
  
  how-to-move                   more info on moving
  basic-rules                   base rules on chess
  general-strategy              guide on basic principles
  [nothing]                     displays this message
  -------------------------------------------------------"
  help-move
  "-------------------------Move-------------------------
  For basic moves, the command is 'move pP:tT', where p is 
  the collumn (in letter form a-h) of the piece you want
  to move and P the row. The same applies to t and T but
  for the target piece/square.

  For castleling, the command is Dc, where D is the
  direction where you want to castle (left | right).
  That is, short castle (as white) is lc and long, rc.
  The same applies but reverse when playing as black.
  ------------------------------------------------------"
  help-basic
  "-------------------------Basic------------------------
  The objective is simple: Check mate your opponent, that
  is, when the king no longer can move to a safe square
  when in check.

  Pieces can move like:
  Pawn                    1 square forward and 2 if in
                          the starting row. However,
                          they take diagonally. (p)
  
  Rook                    Any square diagonally and
                          Horizontally. (r)
  
  Bishop                  Any square diagonally. (b)

  Knight                  'L' shape, they can 'jump'
                          through pieces. (k)
  
  Queen                   Rook and bishop combined. (q)

  King                    Any square but with distance 1. (i)
  ------------------------------------------------------"
  help-strategy
  "-------------------------Strat------------------------
  While there is no 'God' opening or some magic rule,
  some good practices are:

  1. Take the center early: The center of the board
  should be where most of your pieces point to, this is
  because a center attack is usually very overwhelming.

  2. Always look for checks: While it is not smart to
  give a check whenever you can, it is always crucial
  to see checks, as they are the only move that can't
  be ignored.

  3. Put in the shoes of your enemy: You cannot hope
  that your enemy doesn't see the best move, think of
  what you would do in their position and go from there.  
  ------------------------------------------------------")

(function get-help topic
  (match topic
    ""                  help
    "how-to-move"       help-move
    "basic-rules"       help-basic
    "general-strategy"  help-strategy
    "Invalid topic"))

(function squares-between sq-a sq-b inclusive?
   (let [dif-row dif-col] (map (fn a b (abs (- a b))) sq-a sq-b)
        zero|num? #((= % 0) false %)
        ddist (or (zero|num? dif-row) (zero|num? dif-col) 0)
        rep|range (fn sq sq-p row|col dif-sq (if (zero? dif-sq) (repeat (row|col sq) ddist) (range (row|col sq)(row|col sq-p)))))
   ((if inclusive? val (drop 0)) (map vec (rep|range sq-b sq-a 0 dif-row) (rep|range sq-b sq-a 1 dif-col))))

(function chess-castle-parse anot
  (match anot
    "lc"      [(d-idx (white-turn? "i" "I") true) (d-idx (white-turn? "r" "R") true) true]
    "rc"      [(d-idx (white-turn? "i" "I")) (d-idx (white-turn? "r" "R")) false]))

(function en-passant [pc-x pc-y] [tg-x tg-y] piece
  (legal-move [pc-x pc-y] [tg-x tg-y] piece)
  (legal move (d-idx " ") [pc-x tg-y] " "))

(function castle [king-row king-col] [rook-row rook-col] white? left?
  (let dx (if left? -2 2))
  (legal-move [king-row king-col] [king-row (+ dx king-col)] (white? "i" "I"))
  (legal-move [rook-row rook-col] [rook-row (+ (/ dx -2) king-col)] (white? "r" "R")))

(function can-castle? left? white?
  (let castle-range (squares-between (d-idx (if white? "i" "I")) (d-idx (if white? "r" "R") left?)))
  (and (! (.. or (map @(cast-enemies white?) castle-range))) (! (move-record (if white? "i" "I"))) (! (move-record (if white? "r" "R")))))

(function collision-check sq-piece sq-target
  (catch (.. or (map #(!= (fetch-piece %) " ") (squares-between sq-piece sq-target))) false))

(function last-piece sq-ext sq-extp sq-middle
  (let middle-ext (fn mid ext (-> (squares-between mid ext true) @(map fetch-piece) @(remove space?) -1)))
  [(middle-ext sq-middle sq-ext) (middle-ext sq-middle sq-extp)])

(function game-start
  (let mayor-piece-start ["R" "K" "B" "Q" "I" "B" "K" "R"])
  (var board [mayor-piece-start (repeat "P" 8) (repeat " " 8) (repeat " " 8) (repeat " " 8) (repeat " " 8) (repeat "p" 8) (map lower-case mayor-piece-start)]
       players-in-game {:white null, :black null}
       white-turn? true
       move-record []
       timer (time))
  (display "Ready"))

(function virtual-move-check? sq-piece sq-target piece white?
  (legal-move sq-piece sq-target piece)
  (let result (cast-enemies white? (d-idx (white? "i" "I"))))
  (legal-move sq-target sq-piece piece)
  result)

(function record-players who
  (if (.. and (vals players-in-game)) (return))
  (if ((reverse-dict players-in-game) who) (return))
  (var! players-in-game #(if white-turn? (set-at [:white] who %) (set-at [:black] who %))))

(function record-moves piece
  (var! move-record append piece))

(function reverse-dict dic
  (.. .. dict (map vec (vals dic) (keys dic))))

(function legal-move piece-square target-square piece
  (var! board #(-> % (set-at piece-square " " ) (set-at target-square piece))))


  
(function display comment
  (str (rreplace "[\"\[\]]" "" (join "\n" board)) "\n" (str* " " (- 8 (len comment))) comment))

(function handler contents who
  (let [cmd movement] (-> contents (split " ") (adj _ (comp (skip 1) (join " ")))))
  (print [cmd movement])
  (match cmd
    "new"   (game-start)
    "move"  (move movement who)
    "run"   (eval movement)
    "help"  (get-help movement)
    "ver"   timer)
    help)
